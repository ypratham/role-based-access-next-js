generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Post {
  id          Int      @id @default(autoincrement())
  name        String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdById String
  createdBy   User     @relation(fields: [createdById], references: [id])

  @@index([name])
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?
  access_token             String?
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?
  session_state            String?
  refresh_token_expires_in Int?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                            String    @id @default(cuid())
  name                          String?
  email                         String?   @unique
  emailVerified                 DateTime?
  image                         String?
  isActive                      Boolean?  @default(true)
  roleId                        String?   @db.Uuid
  accounts                      Account[]
  Logs_Logs_updatedUserIdToUser Logs[]    @relation("Logs_updatedUserIdToUser")
  Logs_Logs_userIdToUser        Logs[]    @relation("Logs_userIdToUser")
  posts                         Post[]
  sessions                      Session[]
  Roles                         Roles?    @relation(fields: [roleId], references: [id], onUpdate: Restrict)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Logs {
  id                            BigInt   @id @default(autoincrement())
  created_at                    DateTime @default(now()) @db.Timestamptz(6)
  userId                        String
  message                       String?
  type                          ACTIONS
  source                        SOURCES?
  updatedUserId                 String?
  User_Logs_updatedUserIdToUser User?    @relation("Logs_updatedUserIdToUser", fields: [updatedUserId], references: [id], onDelete: Restrict, onUpdate: Restrict)
  User_Logs_userIdToUser        User     @relation("Logs_userIdToUser", fields: [userId], references: [id], onUpdate: Restrict)
}

model Permission {
  id                  BigInt                @id @default(autoincrement())
  source              SOURCES
  created_at          DateTime              @default(now()) @db.Timestamptz(6)
  actions             ACTIONS[]
  name                String?
  RolesPermissionJoin RolesPermissionJoin[]
}

model Roles {
  created_at          DateTime              @default(now()) @db.Timestamptz(6)
  name                String?
  description         String?
  id                  String                @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  RolesPermissionJoin RolesPermissionJoin[]
  User                User[]
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model RolesPermissionJoin {
  id           BigInt      @id @default(autoincrement())
  created_at   DateTime    @default(now()) @db.Timestamptz(6)
  permissionId BigInt?
  roleId       String?     @db.Uuid
  Permission   Permission? @relation(fields: [permissionId], references: [id], onDelete: Cascade)
  Roles        Roles?      @relation(fields: [roleId], references: [id], onDelete: Cascade)
}

/// This enum is commented in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
enum ACTIONS {
  READ
  WRITE
  UPDATE
  DELETE
}

/// This enum is commented in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
enum SOURCES {
  USER
  POSTS
  LOGS
  ROLES
  PERMISSIONS
}
